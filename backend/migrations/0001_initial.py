# Generated by Django 4.2.11 on 2024-04-22 16:30

import backend.usermanager
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_ckeditor_5.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=True)),
                ('username', models.CharField(max_length=150, null=True, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Joined at')),
                ('role', models.CharField(choices=[('SUPERADMIN', 'SUPERADMIN'), ('ADMIN', 'ADMIN'), ('BLOGGER', 'BLOGGER'), ('MERCHANT', 'MERCHANT'), ('MERCHANT_BLOGGER', 'MERCHANT_BLOGGER'), ('LEADMANAGER', 'LEADMANAGER'), ('USER', 'USER')], default='BLOGGER', max_length=30)),
                ('groups', models.ManyToManyField(related_name='group', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='permission', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', backend.usermanager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(default='', max_length=80, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=200, null=True, verbose_name='description')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='categoryicons/%Y/%m/%d/', verbose_name='icon')),
                ('slug', models.SlugField(default='', max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Blog - Category',
                'verbose_name_plural': 'Blog - Categories',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('city_ip', models.CharField(blank=True, max_length=50, null=True)),
                ('country_ip', models.CharField(blank=True, max_length=50, null=True)),
                ('country_domain', models.CharField(blank=True, max_length=10, null=True)),
                ('country_shipping', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('resellerpricing', models.CharField(choices=[('Y', 'Y'), ('N', 'N')], default='N', max_length=15)),
                ('description', models.TextField(blank=True, max_length=600, null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('hot', 'Hot'), ('rejected', 'Rejected'), ('inprocess', 'Inprocess'), ('closed', 'Closed')], default='open', max_length=15)),
                ('deal_notes', models.TextField(blank=True, max_length=800, null=True)),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'leads',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='MainBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('published', 'published'), ('draft', 'draft')], default='draft', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Banner Name')),
                ('image_cover', models.ImageField(blank=True, null=True, upload_to='banners/%Y/%m/%d/', verbose_name='1740x820 banner')),
                ('subject_title', models.CharField(blank=True, max_length=50, null=True)),
                ('main_title', models.CharField(blank=True, max_length=100, null=True)),
                ('cta_text', models.CharField(max_length=50)),
                ('cta_link', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Banner',
                'verbose_name_plural': 'Banners',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
                ('slug', models.SlugField(default='', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, max_length=300, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'Product - Category',
                'verbose_name_plural': 'Product - Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SEOContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('block_name', models.CharField(max_length=150)),
                ('page_name', models.CharField(default='home', max_length=150)),
                ('slug', models.SlugField(default='', max_length=255)),
                ('content1', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=4000, null=True, verbose_name='content')),
                ('content2', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=4000, null=True, verbose_name='content')),
                ('content3', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=4000, null=True, verbose_name='content')),
                ('content4', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=4000, null=True, verbose_name='content')),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('affiliate', 'Affiliate'), ('checkout', 'Checkout'), ('lead', 'Lead')], default='lead', max_length=15)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(default='', max_length=255)),
                ('image_cover', models.ImageField(blank=True, null=True, upload_to='products/cover/%Y/%m/%d/')),
                ('image1', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('image6', models.ImageField(blank=True, null=True, upload_to='products/%Y/%m/%d/')),
                ('seo_desc', models.TextField(blank=True, max_length=250, null=True, verbose_name='seo meta description')),
                ('short_desc', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=500, null=True, verbose_name='Short desc')),
                ('long_desc', django_ckeditor_5.fields.CKEditor5Field(blank=True, max_length=6000, null=True, verbose_name='Long desc')),
                ('ratings', models.PositiveIntegerField(default=130)),
                ('price', models.PositiveIntegerField(default=0)),
                ('discount', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='backend.productcategory')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('slug', models.SlugField(default='', max_length=255, unique=True)),
                ('summary', models.TextField(default='', help_text='Please add a summary upto 500 characters', max_length=500)),
                ('post', django_ckeditor_5.fields.CKEditor5Field(help_text='You can add shortcodes in the post e.g[[youtube #videoid# #caption#]], ')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(blank=True, choices=[('article', 'Article'), ('howto', 'HowTo'), ('codeblog', 'CodeBlog')], default='article', max_length=15)),
                ('claps', models.IntegerField(default=1)),
                ('views', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('unpublished', 'UnPublished')], default='published', max_length=15)),
                ('read_time', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, upload_to='featured_image/%Y/%m/')),
                ('image768_url', models.CharField(blank=True, max_length=200, null=True)),
                ('image480_url', models.CharField(blank=True, max_length=200, null=True)),
                ('image320_url', models.CharField(blank=True, max_length=200, null=True)),
                ('image240_url', models.CharField(blank=True, max_length=200, null=True)),
                ('image120_url', models.CharField(blank=True, max_length=200, null=True)),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='category', to='backend.blogcategory')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Blog - Post',
                'verbose_name_plural': 'Blog - Posts',
            },
        ),
    ]
